# -*- coding: utf-8 -*-
"""Machine_Learning_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mK-XeFMtLqe_MNF1L-jbEY_2TM6bFBAE
"""

from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold
from sklearn.linear_model import Lasso
from xgboost import XGBRegressor
from math import sqrt
from lightgbm import LGBMRegressor
from ngboost import NGBRegressor
from catboost import CatBoostRegressor

kf = KFold(n_splits =  5, shuffle = True, random_state = 42)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=121)

hyper_parameter = {
    'alpha' : [0.01, 0.1, 1, 10],
    'max_iter' : [100, 500, 1000, 1500, 2000]
}

lasso_model = Lasso(alpha=0.001, max_iter=1000, normalize=True)

hyper_parameter_tuner = GridSearchCV(lasso_model, hyper_parameter, cv=kf)
hyper_parameter_tuner.fit(X, y)

hyper_parameter_tuner.best_params_

xgb.fit(X_train, y_train)

gbr.fit(X_train, y_train)

ada.fit(X_train, y_train)

lgb.fit(X_train, y_train)

ngb.fit(X_train, y_train)

cat.fit(X_train, y_train)

xg_pred = xgb.predict(X_test)
gbr_pred = gbr.predict(X_test)
rf_pred = rf.predict(X_test)
ada_pred = ada.predict(X_test)
lgb_pred = lgb.predict(X_test)
ngb_pred = ngb.predict(X_test)
cat_pred = cat.predict(X_test)

mean_squared_error(y_test, xg_pred) ** 0.5

mean_squared_error(y_test, gbr_pred) ** 0.5

mean_squared_error(y_test, rf_pred) ** 0.5

mean_squared_error(y_test, ada_pred) ** 0.5

mean_squared_error(y_test, lgb_pred) ** 0.5

mean_squared_error(y_test, ngb_pred) ** 0.5

mean_squared_error(y_test, cat_pred) ** 0.5

xgb.score(X_test, y_test)

gbr.score(X_test, y_test)

rf.score(X_test, y_test)

ada.score(X_test, y_test)

lgb.score(X_test, y_test)

ngb.score(X_test, y_test)

cat.score(X_test, y_test)